generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id                                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date                              DateTime   @db.Date
  time                              DateTime   @db.Time(6)
  doctor_id                         String     @db.Uuid
  patient_id                        String     @db.Uuid
  status                            String     @db.VarChar(255)
  created_at                        DateTime   @default(now()) @db.Timestamp(6)
  updated_at                        DateTime   @default(now()) @db.Timestamp(6)
  user_appointment_doctor_idTouser  user       @relation("appointment_doctor_idTouser", fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_appointment_patient_idTouser user       @relation("appointment_patient_idTouser", fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  schedule                          schedule[]
}

model medical_history {
  id                                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patient_id                            String   @db.Uuid
  doctor_id                             String   @db.Uuid
  diagnosis                             String?  @db.VarChar(255)
  treatment                             String?  @db.VarChar(255)
  notes                                 String?  @db.VarChar(255)
  created_at                            DateTime @default(now()) @db.Timestamp(6)
  updated_at                            DateTime @default(now()) @db.Timestamp(6)
  user_medical_history_doctor_idTouser  user     @relation("medical_history_doctor_idTouser", fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_medical_history_patient_idTouser user     @relation("medical_history_patient_idTouser", fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profile {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  bio        String?  @db.VarChar(255)
  specialty  String?  @db.VarChar(255)
  education  String?  @db.VarChar(255)
  experience String?  @db.VarChar(255)
  location   String?  @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model schedule {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  doctor_id      String      @db.Uuid
  start_time     DateTime    @db.Time(6)
  end_time       DateTime    @db.Time(6)
  day_of_week    String      @db.VarChar(255)
  appointment_id String      @db.Uuid
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @db.Timestamp(6)
  appointment    appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           user        @relation(fields: [doctor_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                                               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                            String            @unique @db.VarChar(255)
  firstName                                        String?           @db.VarChar(255)
  lastName                                         String?           @db.VarChar(255)
  roq_user_id                                      String            @db.VarChar(255)
  tenant_id                                        String            @db.VarChar(255)
  created_at                                       DateTime          @default(now()) @db.Timestamp(6)
  updated_at                                       DateTime          @default(now()) @db.Timestamp(6)
  appointment_appointment_doctor_idTouser          appointment[]     @relation("appointment_doctor_idTouser")
  appointment_appointment_patient_idTouser         appointment[]     @relation("appointment_patient_idTouser")
  medical_history_medical_history_doctor_idTouser  medical_history[] @relation("medical_history_doctor_idTouser")
  medical_history_medical_history_patient_idTouser medical_history[] @relation("medical_history_patient_idTouser")
  organization                                     organization[]
  profile                                          profile[]
  schedule                                         schedule[]
}
